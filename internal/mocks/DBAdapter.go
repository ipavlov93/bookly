// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	sqlx "github.com/jmoiron/sqlx"
)

// DBAdapter is an autogenerated mock type for the DBAdapter type
type DBAdapter struct {
	mock.Mock
}

// GetConnection provides a mock function with no fields
func (_m *DBAdapter) GetConnection() *sqlx.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnection")
	}

	var r0 *sqlx.DB
	if rf, ok := ret.Get(0).(func() *sqlx.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	return r0
}

// MustBeginTx provides a mock function with given fields: ctx, options
func (_m *DBAdapter) MustBeginTx(ctx context.Context, options *sql.TxOptions) *sqlx.Tx {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for MustBeginTx")
	}

	var r0 *sqlx.Tx
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) *sqlx.Tx); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	return r0
}

// MustRollbackTxUnlessCommitted provides a mock function with given fields: tx
func (_m *DBAdapter) MustRollbackTxUnlessCommitted(tx *sqlx.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for MustRollbackTxUnlessCommitted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sqlx.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDBAdapter creates a new instance of DBAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBAdapter {
	mock := &DBAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
